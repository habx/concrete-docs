"use strict";(self.webpackChunkconcrete_docs=self.webpackChunkconcrete_docs||[]).push([[64],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=o.createContext({}),p=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return o.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,h=c["".concat(d,".").concat(u)]||c[u]||s[u]||r;return n?o.createElement(h,l(l({ref:t},m),{},{components:n})):o.createElement(h,l({ref:t},m))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5588:(e,t,n)=>{n.d(t,{R:()=>s});var o,a=n(1880),r=n(2949),l=n(7294),i=n(2125),d=n(7213),p=n(7745);const m=(0,i.ZP)(d.A)(o||(o=(0,a.Z)(["\n  background: transparent !important;\n"]))),s=e=>{let{children:t}=e;const{isDarkTheme:n}=(0,r.I)();return l.createElement(m,{backgroundColor:n?p.D.neutralWhiteWithIntensityFading[0]:p.D.neutralWhiteWithIntensityFading[1e3]},t)}},7996:(e,t,n)=>{n.r(t),n.d(t,{BackgroundWithPadding:()=>D,DivWithNeutralColor:()=>W,DivWithPrimaryCalmColor:()=>b,NeutralColorExample:()=>T,ShadowBox:()=>P,ShadowBoxContainer:()=>B,SpanWithPrimaryColor:()=>N,assets:()=>f,contentTitle:()=>x,default:()=>I,frontMatter:()=>v,metadata:()=>C,toc:()=>w});var o,a,r,l,i,d,p=n(7462),m=n(1880),s=(n(7294),n(3905)),c=n(5588),u=n(2125),h=n(1041),k=n(7213),y=n(7745),g=n(336);const v={title:"Theme"},x=void 0,C={unversionedId:"styling/theme",id:"styling/theme",title:"Theme",description:"Overview",source:"@site/docs/styling/theme.mdx",sourceDirName:"styling",slug:"/styling/theme",permalink:"/docs/styling/theme",draft:!1,editUrl:"https://github.com/habx/concrete-docs/edit/dev/docs/styling/theme.mdx",tags:[],version:"current",frontMatter:{title:"Theme"},sidebar:"docs",previous:{title:"Import / Export",permalink:"/docs/table/imex"},next:{title:"Animations",permalink:"/docs/styling/animations"}},f={},w=[{value:"Overview",id:"overview",level:2},{value:"Colors",id:"colors",level:2},{value:"Example usage",id:"example-usage",level:4},{value:"Colors variations",id:"colors-variations",level:3},{value:"Example",id:"example",level:4},{value:"Neutral color",id:"neutral-color",level:3},{value:"In dark mode",id:"in-dark-mode",level:5},{value:"Example usage",id:"example-usage-1",level:4},{value:"Text color",id:"text-color",level:3},{value:"Example",id:"example-1",level:4},{value:"Variations",id:"variations",level:3},{value:"Opacity",id:"opacity",level:4},{value:"Dynamic",id:"dynamic",level:4},{value:"Color variation",id:"color-variation",level:4},{value:"Use Root Theme",id:"use-root-theme",level:4},{value:"Custom props variation",id:"custom-props-variation",level:4},{value:"Shadow",id:"shadow",level:2},{value:"Example",id:"example-2",level:4},{value:"Font",id:"font",level:2},{value:"Hooks",id:"hooks",level:2},{value:"useThemeVariant",id:"usethemevariant",level:3},{value:"useCurrentBackground",id:"usecurrentbackground",level:3},{value:"useHasColoredBackground",id:"usehascoloredbackground",level:3},{value:"Dark Mode",id:"dark-mode",level:2}],N=u.ZP.span(o||(o=(0,m.Z)(["\n  color: ",";\n"])),h.rS.color("primary")),b=u.ZP.div(a||(a=(0,m.Z)(["\n  color: ",";\n  padding: 8px 24px;\n"])),(e=>{let{variation:t,...n}=e;return h.rS.color("primary",{variation:t})(n)})),T=()=>(0,s.kt)("div",null,new Array(11).fill(0).map(((e,t)=>(0,s.kt)(W,{key:t,strength:""+100*t,mdxType:"DivWithNeutralColor"},"I'm a neutral color with strength ",100*t)))),W=u.ZP.div(r||(r=(0,m.Z)(["\n  color: ",";\n  padding: 8px 24px;\n"])),(e=>{let{strength:t,...n}=e;return h.rS.neutralColor(t)(n)})),B=u.ZP.div(l||(l=(0,m.Z)(["\n  display: grid;\n  grid-gap: 24px;\n  grid-template-columns: repeat(6, 1fr);\n  padding: 32px;\n"]))),P=u.ZP.div(i||(i=(0,m.Z)(["\n  height: 100px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-shadow: ",";\n  background: white;\n"])),(e=>{let{shadow:t,...n}=e;return h.rS.shadow(t)(n)})),D=(0,u.ZP)(k.A)(d||(d=(0,m.Z)(["\n  padding: 8px 24px;\n  margin: 32px 0;\n"]))),j={toc:w,SpanWithPrimaryColor:N,DivWithPrimaryCalmColor:b,NeutralColorExample:T,DivWithNeutralColor:W,ShadowBoxContainer:B,ShadowBox:P,BackgroundWithPadding:D};function I(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,p.Z)({},j,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"overview"},"Overview"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Concrete")," uses ",(0,s.kt)("a",{parentName:"p",href:"https://styled-components.com/"},"styled-components")," for its own styling, so it is already well integrated.\nTheme object is accessible directly in any styled component rendered under ",(0,s.kt)("inlineCode",{parentName:"p"},"Provider"),".\nColors should always be based on ",(0,s.kt)("em",{parentName:"p"},"theme")," in order to have a consistent darkmode."),(0,s.kt)("h2",{id:"colors"},"Colors"),(0,s.kt)("p",null,"You can access a set of colors defined in the ",(0,s.kt)("em",{parentName:"p"},"theme"),". They are"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"primary")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"secondary")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"warning")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"error")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"success")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"background"))),(0,s.kt)("p",null,"Most of our components have ",(0,s.kt)("inlineCode",{parentName:"p"},"error")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"warning")," props that use the theme colors described here."),(0,s.kt)("h4",{id:"example-usage"},"Example usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'import styled from "styled-components";\nimport { theme } from "@habx/ui-core";\n\nexport const SpanWithPrimaryColor = styled.span`\n  color: ${theme.color("primary")};\n`;\n')),(0,s.kt)(N,{mdxType:"SpanWithPrimaryColor"},"I'm primary color !"),(0,s.kt)("h3",{id:"colors-variations"},"Colors variations"),(0,s.kt)("p",null,"Main colors come with 6 variations useful when you want contrast in your components."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"calmer")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"calm")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"base")," (default)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"loud")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"louder")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"contrastText"))),(0,s.kt)(c.R,{backgroundColor:y.D.neutralWhiteWithIntensityFading[900],mdxType:"DocuBackground"},(0,s.kt)(b,{variation:"calmer",mdxType:"DivWithPrimaryCalmColor"},"I'm calmer primary color !"),(0,s.kt)(b,{variation:"calm",mdxType:"DivWithPrimaryCalmColor"},"I'm calm primary color !"),(0,s.kt)(b,{variation:"base",mdxType:"DivWithPrimaryCalmColor"},"I'm base primary color !"),(0,s.kt)(b,{variation:"loud",mdxType:"DivWithPrimaryCalmColor"},"I'm loud primary color !"),(0,s.kt)(b,{variation:"louder",mdxType:"DivWithPrimaryCalmColor"},"I'm louder primary color !"),(0,s.kt)(b,{variation:"contrastText",mdxType:"DivWithPrimaryCalmColor"},"I'm contrastText primary color !")),(0,s.kt)("h4",{id:"example"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'import styled from "styled-components";\nimport { theme } from "@habx/ui-core";\n\nexport const SpanWithPrimaryColor = styled.span`\n  color: ${theme.color("primary", { variation: "calm" })};\n`;\n')),(0,s.kt)("h3",{id:"neutral-color"},"Neutral color"),(0,s.kt)("p",null,"Neutral color is also defined in the ",(0,s.kt)("em",{parentName:"p"},"theme")," and comes with a scale of strengths from 0 to 1000 with 100 steps.\nIt will adapt its color if background is dark or light."),(0,s.kt)(k.A,{backgroundColor:y.D.neutralWhiteWithIntensityFading[900],mdxType:"Background"},(0,s.kt)(T,{mdxType:"NeutralColorExample"})),(0,s.kt)("h5",{id:"in-dark-mode"},"In dark mode"),(0,s.kt)(k.A,{backgroundColor:y.D.neutralWhiteWithIntensityFading[100],mdxType:"Background"},(0,s.kt)(T,{mdxType:"NeutralColorExample"})),(0,s.kt)("h4",{id:"example-usage-1"},"Example usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'import styled from "styled-components";\nimport { theme } from "@habx/ui-core";\n\nexport const SpanWithNeutralColor = styled.span`\n  color: ${theme.neutralColor(800)};\n`;\n')),(0,s.kt)("h3",{id:"text-color"},"Text color"),(0,s.kt)("p",null,"Same case for text color. A color with variation is defined in theme, and you can apply this color in your styled-components."),(0,s.kt)("h4",{id:"example-1"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'import styled from "styled-components";\nimport { theme } from "@habx/ui-core";\n\nexport const SpanWithTextColor = styled.span`\n  color: ${theme.textColor()};\n`;\n')),(0,s.kt)("h3",{id:"variations"},"Variations"),(0,s.kt)("h4",{id:"opacity"},"Opacity"),(0,s.kt)("p",null,"You can change opacity of colors if needed by passing the ",(0,s.kt)("inlineCode",{parentName:"p"},"opacity")," props in config"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'theme.color("primary", { opacity: 0.5 });\ntheme.neutralColor("800", { opacity: 0.5 });\n')),(0,s.kt)("p",null,"If you want to play with opacity color intensity without transparency, you can add the ",(0,s.kt)("inlineCode",{parentName:"p"},"gradient")," property with value set\nto ",(0,s.kt)("inlineCode",{parentName:"p"},"withIntensityFading")," (only available with ",(0,s.kt)("inlineCode",{parentName:"p"},"neutralColor"),")"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'theme.neutralColor("800", { opacity: 0.5, gradient: "withIntensityFading" });\n')),(0,s.kt)("h4",{id:"dynamic"},"Dynamic"),(0,s.kt)("p",null,"If you want your component to use props ",(0,s.kt)("inlineCode",{parentName:"p"},"warning")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"error"),", add ",(0,s.kt)("inlineCode",{parentName:"p"},"dynamic: true")," in options."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'const DynamicComponent = styled.div`\n  border: 1px solid ${theme.color("primary", { dynamic: true })};\n`;\nconst App = () => (\n  <div>\n    <DynamicComponent /> // => Border will take the primary color\n    <DynamicComponent warning /> // => Border will take the warning color\n    <DynamicComponent error /> // => Border will take the error color\n  </div>\n);\n')),(0,s.kt)("h4",{id:"color-variation"},"Color variation"),(0,s.kt)("p",null,"The name of the prop we want to use to override manually the variation of the text"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'const MyComponent = styled.div`\n  color: ${theme.textColor("text", { variationPropName: "variation" })};\n`;\n\nconst App = () => (\n  <div>\n    <MyComponent /> // => Text wil take the theme color in the variation defined\n    in the config (or "text" by default)\n    <MyComponent variation="lowContrast" /> // => Text will take the theme color\n    in the "lowContrast" variation\n  </div>\n);\n')),(0,s.kt)("h4",{id:"use-root-theme"},"Use Root Theme"),(0,s.kt)("p",null,"Allows to bypass nearest background behavior and takes root background (theme background) to calculate color scales"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"const MyComponent = styled.div`\n  background: ${theme.color('background', { useRootTheme: true})};\n`;\n\n\n\nconst App = () => (\n  <Background backgroundColor=\"red\"}>\n    <MyComponent /> // => Background won't be red but will takes theme default background value\n  </Background>\n);\n")),(0,s.kt)("h4",{id:"custom-props-variation"},"Custom props variation"),(0,s.kt)("p",null,"The name of the prop we want to use to override manually the color of the text.\nNote that if you pass a value to the prop defined here, we won't apply any variation to it."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'const MyComponent = styled.div`\n  color: ${theme.textColor("text", { valuePropName: "textColor" })};\n`;\nconst App = () => (\n  <div>\n    <MyComponent />\n    // => Text wil take the theme color in the chosen variation // (as defined in\n    config or overwritten in variationPropName)\n    <MyComponent textColor="red" /> // => Text will be red\n  </div>\n);\n')),(0,s.kt)("h2",{id:"shadow"},"Shadow"),(0,s.kt)("p",null,"Shadow comes also from the theme with a scale of 6 keys"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"flat")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"lower")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"low")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"regular")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"high")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"higher"))),(0,s.kt)(k.A,{backgroundColor:y.D.neutralWhiteWithIntensityFading[900],mdxType:"Background"},(0,s.kt)(B,{mdxType:"ShadowBoxContainer"},(0,s.kt)(P,{shadow:"lower",mdxType:"ShadowBox"},(0,s.kt)(g.xv,{mdxType:"Text"},"Lower")),(0,s.kt)(P,{shadow:"low",mdxType:"ShadowBox"},(0,s.kt)(g.xv,{mdxType:"Text"},"Low")),(0,s.kt)(P,{shadow:"regular",mdxType:"ShadowBox"},(0,s.kt)(g.xv,{mdxType:"Text"},"Regular")),(0,s.kt)(P,{shadow:"high",mdxType:"ShadowBox"},(0,s.kt)(g.xv,{mdxType:"Text"},"High")),(0,s.kt)(P,{shadow:"higher",mdxType:"ShadowBox"},(0,s.kt)(g.xv,{mdxType:"Text"},"Higher")))),(0,s.kt)("h4",{id:"example-2"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'import styled from "styled-components";\nimport { theme } from "@habx/ui-core";\n\nexport const DivWithLowerShadow = styled.div`\n  box-shadow: ${theme.shadow("lower")};\n`;\n')),(0,s.kt)("h2",{id:"font"},"Font"),(0,s.kt)("p",null,"You can always import font-family from theme by doing"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"export const FontFamily = styled.span`\n  font-family: ${theme.font()};\n`;\n")),(0,s.kt)("h2",{id:"hooks"},"Hooks"),(0,s.kt)("h3",{id:"usethemevariant"},"useThemeVariant"),(0,s.kt)("p",null,"Sometime you will need to access theme properties in the js scope. You can get that from the hook ",(0,s.kt)("inlineCode",{parentName:"p"},"useThemeVariant")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Background, useThemeVariant } from "@habx/ui-core";\n\nconst MyComponent = () => {\n  const theme = useThemeVariant();\n\n  return (\n    <Background backgroundColor={theme.neutralColor.withIntensityFading[200]}>\n      ...\n    </ProjectsStatusDashboardContainer>\n  );\n};\n')),(0,s.kt)("h3",{id:"usecurrentbackground"},"useCurrentBackground"),(0,s.kt)("p",null,"Allows accessing current background color through the nearest ",(0,s.kt)("inlineCode",{parentName:"p"},"Background")," provider."),(0,s.kt)("p",null,"You can overwrite the default behavior and access to the root background color by passing the config ",(0,s.kt)("inlineCode",{parentName:"p"},"useRootTheme"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"const nearestBackground = useCurrentBackground({ useRootTheme: true });\nconst rootBackground = useCurrentBackground({ useRootTheme: true });\n")),(0,s.kt)("h3",{id:"usehascoloredbackground"},"useHasColoredBackground"),(0,s.kt)("p",null,"Abstraction of ",(0,s.kt)("inlineCode",{parentName:"p"},"useCurrentBackground")," to know if background is making components using ",(0,s.kt)("em",{parentName:"p"},"dark")," or ",(0,s.kt)("em",{parentName:"p"},"light")," theme variant"),(0,s.kt)("h2",{id:"dark-mode"},"Dark Mode"),(0,s.kt)("p",null,"Dark theme variant is used when nearest ",(0,s.kt)("inlineCode",{parentName:"p"},"Background")," provider has a dark color as ",(0,s.kt)("inlineCode",{parentName:"p"},"backgroundColor")," props."),(0,s.kt)(D,{backgroundColor:y.D.neutralWhiteWithIntensityFading[900],mdxType:"BackgroundWithPadding"},(0,s.kt)(g.xv,{mdxType:"Text"},"I'm in dark mode")),(0,s.kt)(D,{backgroundColor:y.D.neutralWhiteWithIntensityFading[100],mdxType:"BackgroundWithPadding"},(0,s.kt)(g.xv,{mdxType:"Text"},"I'm in light mode")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"  import { Text, Background } from '@habx/ui-core';\n\n  <Background backgroundColor={palette.neutralWhiteWithIntensityFading[900]}>\n    <Text>I'm in dark mode</Text>\n  </Background>\n\n\n  <Background backgroundColor={palette.neutralWhiteWithIntensityFading[100]}>\n    <Text>I'm in light mode</Text>\n  </Background>\n\n")))}I.isMDXComponent=!0}}]);