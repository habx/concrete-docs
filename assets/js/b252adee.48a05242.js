"use strict";(self.webpackChunkconcrete_docs=self.webpackChunkconcrete_docs||[]).push([[984],{2463:(e,n,t)=>{t.d(n,{K:()=>h});var a,r,l,o,i=t(7294),p=t(2125),s=t(6697),c=t(336),d=t(1041),u=function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},m=p.ZP.div(a||(a=u(["\n  font-family: ",";\n  font-size: ","px;\n\n  &[data-small='true'] {\n    font-size: ","px;\n  }\n\n  display: flex;\n  flex: 0 0 auto;\n  flex-direction: row;\n  align-items: flex-start;\n\n  padding: 12px 24px;\n  border-radius: 6px;\n\n  background: var(--alert-panel-background);\n  color: var(--alert-panel-color);\n\n  --alert-panel-background: ",";\n  --alert-panel-color: ",";\n  --alert-panel-title-color: ",";\n  --alert-panel-icon-color: ",";\n\n  &[data-warning='true'] {\n    --alert-panel-background: ",";\n    --alert-panel-color: ",";\n    --alert-panel-icon-color: var(--alert-panel-color);\n    --alert-panel-title-color: var(--alert-panel-color);\n  }\n  &[data-success='true'] {\n    --alert-panel-background: ",";\n    --alert-panel-color: ",";\n    --alert-panel-icon-color: var(--alert-panel-color);\n    --alert-panel-title-color: var(--alert-panel-color);\n  }\n  &[data-error='true'] {\n    --alert-panel-background: ",";\n    --alert-panel-color: ",";\n    --alert-panel-icon-color: var(--alert-panel-color);\n    --alert-panel-title-color: var(--alert-panel-color);\n  }\n\n  &[data-bare='true'] {\n    --alert-panel-background: none;\n    --alert-panel-color: ",";\n    --alert-panel-icon-color: var(--alert-panel-color);\n    --alert-panel-title-color: var(--alert-panel-color);\n  }\n"],["\n  font-family: ",";\n  font-size: ","px;\n\n  &[data-small='true'] {\n    font-size: ","px;\n  }\n\n  display: flex;\n  flex: 0 0 auto;\n  flex-direction: row;\n  align-items: flex-start;\n\n  padding: 12px 24px;\n  border-radius: 6px;\n\n  background: var(--alert-panel-background);\n  color: var(--alert-panel-color);\n\n  --alert-panel-background: ",";\n  --alert-panel-color: ",";\n  --alert-panel-title-color: ",";\n  --alert-panel-icon-color: ",";\n\n  &[data-warning='true'] {\n    --alert-panel-background: ",";\n    --alert-panel-color: ",";\n    --alert-panel-icon-color: var(--alert-panel-color);\n    --alert-panel-title-color: var(--alert-panel-color);\n  }\n  &[data-success='true'] {\n    --alert-panel-background: ",";\n    --alert-panel-color: ",";\n    --alert-panel-icon-color: var(--alert-panel-color);\n    --alert-panel-title-color: var(--alert-panel-color);\n  }\n  &[data-error='true'] {\n    --alert-panel-background: ",";\n    --alert-panel-color: ",";\n    --alert-panel-icon-color: var(--alert-panel-color);\n    --alert-panel-title-color: var(--alert-panel-color);\n  }\n\n  &[data-bare='true'] {\n    --alert-panel-background: none;\n    --alert-panel-color: ",";\n    --alert-panel-icon-color: var(--alert-panel-color);\n    --alert-panel-title-color: var(--alert-panel-color);\n  }\n"])),d.rS.font(),s.d.moon.size,s.d.pluto.size,d.rS.neutralColor(100),d.rS.neutralColor(700),d.rS.neutralColor(700),d.rS.neutralColor(500),d.rS.color("warning",{variation:"calmer"}),d.rS.color("warning",{variation:"loud"}),d.rS.color("success",{variation:"calmer"}),d.rS.color("success"),d.rS.color("error",{variation:"calmer"}),d.rS.color("error"),d.rS.neutralColor(400)),v=p.ZP.div(r||(r=u(["\n  margin: 2px 12px 0 -12px;\n  color: var(--alert-panel-icon-color);\n"],["\n  margin: 2px 12px 0 -12px;\n  color: var(--alert-panel-icon-color);\n"]))),x=p.ZP.div(l||(l=u(["\n  flex: 0 0 auto;\n\n  margin: 2px 12px 0 -12px;\n  width: 48px;\n"],["\n  flex: 0 0 auto;\n\n  margin: 2px 12px 0 -12px;\n  width: 48px;\n"]))),g=(0,p.ZP)(c.xv)(o||(o=u(["\n  color: var(--alert-panel-title-color);\n  font-weight: 500;\n  margin-top: -2px;\n"],["\n  color: var(--alert-panel-title-color);\n  font-weight: 500;\n  margin-top: -2px;\n"]))),f=function(){return f=Object.assign||function(e){for(var n,t=1,a=arguments.length;t<a;t++)for(var r in n=arguments[t])Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);return e},f.apply(this,arguments)},k=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(a=Object.getOwnPropertySymbols(e);r<a.length;r++)n.indexOf(a[r])<0&&Object.prototype.propertyIsEnumerable.call(e,a[r])&&(t[a[r]]=e[a[r]])}return t},h=i.forwardRef((function(e,n){var t=e.title,a=e.illustration,r=e.icon,l=e.warning,o=e.error,p=e.success,s=e.bare,c=e.small,d=e.children,u=k(e,["title","illustration","icon","warning","error","success","bare","small","children"]);return i.createElement(m,f({ref:n,"data-warning":l,"data-error":o,"data-success":p,"data-bare":s,"data-small":c},u),a&&i.createElement(x,null,a),r&&i.createElement(v,null,r),i.createElement("div",null,t&&i.createElement(g,{type:c?"small":"regular"},t),d))}))},3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,v=u["".concat(p,".").concat(m)]||u[m]||d[m]||l;return t?a.createElement(v,o(o({ref:n},c),{},{components:t})):a.createElement(v,o({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6789:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>v,frontMatter:()=>p,metadata:()=>c,toc:()=>u});var a=t(7462),r=(t(7294),t(3905)),l=t(2463),o=t(7629),i=t(336);const p={title:"Import / Export"},s=void 0,c={unversionedId:"table/imex",id:"table/imex",title:"Import / Export",description:"Overview",source:"@site/docs/table/imex.mdx",sourceDirName:"table",slug:"/table/imex",permalink:"/docs/table/imex",draft:!1,editUrl:"https://github.com/habx/concrete-docs/edit/dev/docs/table/imex.mdx",tags:[],version:"current",frontMatter:{title:"Import / Export"},sidebar:"docs",previous:{title:"Table usage",permalink:"/docs/table/usage"},next:{title:"Theme",permalink:"/docs/styling/theme"}},d={},u=[{value:"Overview",id:"overview",level:2},{value:"Columns",id:"columns",level:2},{value:"Identifier (required)",id:"identifier-required",level:3},{value:"Example",id:"example",level:5},{value:"Type (required)",id:"type-required",level:3},{value:"Example",id:"example-1",level:5},{value:"Header (optional)",id:"header-optional",level:3},{value:"Example",id:"example-2",level:5},{value:"Path (optional)",id:"path-optional",level:3},{value:"Example",id:"example-3",level:5},{value:"Parse &amp; Format",id:"parse--format",level:3},{value:"Example",id:"example-4",level:5},{value:"Validation",id:"validation",level:3},{value:"Example",id:"example-5",level:5},{value:"Excel data validation",id:"excel-data-validation",level:4},{value:"Example",id:"example-6",level:5},{value:"Excel Styling properties",id:"excel-styling-properties",level:3},{value:"Width",id:"width",level:4},{value:"Hidden",id:"hidden",level:4},{value:"Export",id:"export",level:2},{value:"Example",id:"example-7",level:4},{value:"Columns",id:"columns-1",level:5},{value:"Columns",id:"columns-2",level:5},{value:"Basic Usage",id:"basic-usage",level:5},{value:"Import",id:"import",level:2},{value:"Overview",id:"overview-1",level:3},{value:"Validation",id:"validation-1",level:4},{value:"Rules",id:"rules",level:3},{value:"Usage",id:"usage",level:3},{value:"With Drag &amp; Drop",id:"with-drag--drop",level:4}],m={toc:u};function v(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Concrete Table")," exports two hooks that use ",(0,r.kt)("inlineCode",{parentName:"p"},"react-table")," column types to export and import data.\nFor now, it supports ",(0,r.kt)("inlineCode",{parentName:"p"},"csv"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"xls")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"xlsx")," files using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/exceljs/exceljs"},"exceljs"),"."),(0,r.kt)("h2",{id:"columns"},"Columns"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Concrete Table")," extends ",(0,r.kt)("inlineCode",{parentName:"p"},"react-table")," column types with a new property ",(0,r.kt)("inlineCode",{parentName:"p"},"meta"),". If you want to use the import/export feature,\nyou will need to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"imex")," property in ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," of the column you want to export and/or import."),(0,r.kt)(l.K,{warning:!0,icon:(0,r.kt)(o.J,{icon:"exclam-outline",mdxType:"Icon"}),mdxType:"AlertPanel"},(0,r.kt)(i.xv,{markdown:!0,mdxType:"Text"},"Columns without `meta.imex` will be ignored during export or import.")),(0,r.kt)("h3",{id:"identifier-required"},"Identifier (required)"),(0,r.kt)("p",null,"Columns definition for an import should always contain ",(0,r.kt)("em",{parentName:"p"},"one")," column with the property ",(0,r.kt)("inlineCode",{parentName:"p"},"identifier")," set to true.\nIt will allow finding existing value in your original data and update it instead of creating new values."),(0,r.kt)("h5",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'[\n  {\n    Header: "ID",\n    accessor: "id",\n    imex: {\n      identifier: true,\n    },\n  },\n];\n')),(0,r.kt)(l.K,{icon:(0,r.kt)(o.J,{icon:"information",mdxType:"Icon"}),mdxType:"AlertPanel"},(0,r.kt)(i.xv,{markdown:!0,mdxType:"Text"},"Sometimes your data has a more complex way to defines uniqness. In this case, you can pass `findPrevValPredicate` to the hook to avoid data duplication")),(0,r.kt)("h3",{id:"type-required"},"Type (required)"),(0,r.kt)("p",null,"Parsing is done by our hooks so you need to specify what type of data you are expecting. Possible values are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IMEXColumnType.string")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IMEXColumnType['string[]']'")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IMEXColumnType.number")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IMEXColumnType['number[]']"))),(0,r.kt)("p",null,"If given data cannot be converted into ",(0,r.kt)("em",{parentName:"p"},"type")," specified in column it will be considered as an error."),(0,r.kt)("h5",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'[\n  {\n    Header: "Name",\n    accessor: "name",\n    imex: {\n      type: IMEXColumnType.string,\n    },\n  },\n  {\n    Header: "Age",\n    accessor: "age",\n    imex: {\n      type: IMEXColumnType.number,\n    },\n  },\n];\n')),(0,r.kt)("h3",{id:"header-optional"},"Header (optional)"),(0,r.kt)("p",null,"Used as header in the exported file. If not specified, column Header will be used but is has to be a string."),(0,r.kt)("h5",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'[\n  {\n    Header: () => <CustomHeader />,\n    accessor: "name",\n    imex: {\n      header: "Name",\n    },\n  },\n];\n')),(0,r.kt)("h3",{id:"path-optional"},"Path (optional)"),(0,r.kt)("p",null,"Used as param to get & set lodash functions to retrieve or set data.\nIf not specified, column accessor will be used but it would need to be a string."),(0,r.kt)("h5",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'[\n  {\n    Header: "Name",\n    accessor: (row) => row.user.name,\n    imex: {\n      path: "user.name",\n    },\n  },\n];\n')),(0,r.kt)("h3",{id:"parse--format"},"Parse & Format"),(0,r.kt)("p",null,"Inspired by ",(0,r.kt)("a",{parentName:"p",href:"https://final-form.org/"},"final-form"),", columns imex property accept ",(0,r.kt)("inlineCode",{parentName:"p"},"parse")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"format")," properties that should be functions\nthat returns either ",(0,r.kt)("em",{parentName:"p"},"parsed")," or ",(0,r.kt)("em",{parentName:"p"},"formated")," value.\n",(0,r.kt)("inlineCode",{parentName:"p"},"format")," formats your raw data to give it to exported values when ",(0,r.kt)("inlineCode",{parentName:"p"},"parse")," transforms data given from import to store it in your database."),(0,r.kt)("h5",{id:"example-4"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},";[\n  {\n    Header: 'type de pi\xe8ce',\n    accessor: 'category',\n    imex: {\n      format: (value: string | number) =>\n        roomOptions.find((option) => option.value === value)?.label ?? value,\n      parse: (label: string | number) =>\n        roomOptions.find(\n            (option) =>\n              trim(lowerCase(option.label)) === trim(lowerCase(`${label}`))\n        )?.value ?? label,\n      },\n    },\n  },\n]\n")),(0,r.kt)("h3",{id:"validation"},"Validation"),(0,r.kt)("p",null,"You can validate data given in you import with the ",(0,r.kt)("inlineCode",{parentName:"p"},"validate")," property. If you return a ",(0,r.kt)("em",{parentName:"p"},"string")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", user won't\nbe able to import this data."),(0,r.kt)(l.K,{icon:(0,r.kt)(o.J,{icon:"information",mdxType:"Icon"}),mdxType:"AlertPanel"},(0,r.kt)(i.xv,{markdown:!0,mdxType:"Text"},"Rows with error are ignored for import. They are just displayed to user as warnings but won't be imported")),(0,r.kt)("h5",{id:"example-5"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'[\n  {\n    Header: "type de pi\xe8ce",\n    accessor: "category",\n    imex: {\n      validate: (value: string) =>\n        Object.values(RoomCategories).includes(value as RoomCategories),\n    },\n  },\n];\n')),(0,r.kt)("h4",{id:"excel-data-validation"},"Excel data validation"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"dataValidation")," property to set excel specific validation defined ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/exceljs/exceljs#data-validations"},"by exceljs"),".\nIt will be applied every existing rows plus 50 rows. This can be overwritten by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"extraRows")," property manually to the ",(0,r.kt)("inlineCode",{parentName:"p"},"useExportTable")," hook."),(0,r.kt)("h5",{id:"example-6"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'[\n  {\n    Header: "type de pi\xe8ce",\n    accessor: "category",\n    imex: {\n      dataValidation: {\n        type: "list",\n        allowBlank: false,\n        formulae: [`"${roomOptions.map(({ label }) => label).join(",")}"`],\n      },\n      validate: (value: string) =>\n        Object.values(RoomCategories).includes(value as RoomCategories),\n    },\n  },\n];\n')),(0,r.kt)("h3",{id:"excel-styling-properties"},"Excel Styling properties"),(0,r.kt)("h4",{id:"width"},"Width"),(0,r.kt)("p",null,"You can pass a width property to force excel to display your column with a specific width."),(0,r.kt)("h4",{id:"hidden"},"Hidden"),(0,r.kt)("p",null,"Sometimes you will want to hide a column (like the one you use as identifier), to make your table easier to read."),(0,r.kt)("h2",{id:"export"},"Export"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useExportTable")," hook takes ",(0,r.kt)("inlineCode",{parentName:"p"},"columns")," as mandatory argument for its call. All other argument can be passed either in\nthe hook call or in its function call.\nIt returns an array with first property is a function that will trigger the download of the exported file with data passed as params."),(0,r.kt)("h4",{id:"example-7"},"Example"),(0,r.kt)("h5",{id:"columns-1"},"Columns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const data = [\n  { name: "Alexis", age: 26 },\n  { name: "Benjamin", age: 10 },\n];\n')),(0,r.kt)("h5",{id:"columns-2"},"Columns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const columns = [\n  {\n    Header: "Name",\n    accessor: "name",\n    imex: {\n      type: IMEXColumnType.string,\n    },\n  },\n  {\n    Header: "Age",\n    accessor: "age",\n    imex: {\n      type: IMEXColumnType.number,\n    },\n  },\n];\n')),(0,r.kt)("h5",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const [downloadTableData] = useExportTable();\n\n//\n\ndownloadTableData("export", {\n  data,\n  columns,\n});\n')),(0,r.kt)("h2",{id:"import"},"Import"),(0,r.kt)("h3",{id:"overview-1"},"Overview"),(0,r.kt)("p",null,"We tried to make import validation as clear as possible with a validation prompt that displays the table of modifications."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/habx/image/upload/v1616507243/tech/ui-table/imex.gif",alt:"Import gif"})),(0,r.kt)("h4",{id:"validation-1"},"Validation"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/habx/image/upload/v1620664728/tech/ui-table/imex_compare.png",alt:"Import validation"})),(0,r.kt)("p",null,"You can see 3 state of rows: ",(0,r.kt)("em",{parentName:"p"},"Insertions"),", ",(0,r.kt)("em",{parentName:"p"},"modifications")," and ",(0,r.kt)("em",{parentName:"p"},"errors"),".\nThe total of theses rows are displayed next to the submit button.\nThe number of impacted entity for a specific key is shown in the footer."),(0,r.kt)("h3",{id:"rules"},"Rules"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can remove columns in your sheet file as long as they are not required or tagged as identifier"),(0,r.kt)("li",{parentName:"ul"},"If you pass an empty string, the hooks consider that you did not pass any value at all"),(0,r.kt)("li",{parentName:"ul"},"Any error in a cell of a row will prevent the import of the entire row even if other values are valid"),(0,r.kt)("li",{parentName:"ul"},"If the comparison result shows that the is no difference between current data and imported rows, they are ignored.")),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'export const MyTableWithImport = () => {\n  const tableInstance = useTable({\n    data,\n    columns,\n  });\n  const upsertRow = () => new Promise((resolve) => setTimeout(resolve, 1000));\n\n  const importTable = useImportTable({\n    columns,\n    upsertRow: upsertRow,\n    getOriginalData: () => data,\n    confirmLightBoxTitle: "Import",\n  });\n};\n')),(0,r.kt)("h4",{id:"with-drag--drop"},"With Drag & Drop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'export const MyTableWithImport = () => {\n  const tableInstance = useTable({\n    data,\n    columns,\n  });\n  const upsertRow = () => new Promise((resolve) => setTimeout(resolve, 1000));\n  const dropzoneProps = {\n    columns: IMEX_COLUMNS,\n    upsertRow: upsertRow,\n    getOriginalData: () => FAKE_DATA,\n    confirmLightBoxTitle: "Import",\n  };\n\n  return (\n    <ImportTableDropzone {...dropzoneProps}>\n      <Table instance={tableInstance} />\n    </ImportTableDropzone>\n  );\n};\n')))}v.isMDXComponent=!0}}]);